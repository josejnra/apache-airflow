networks:
  airflow:

# ------------------------------------------------------------
# SHARED VOLUMES (for dags, logs, plugins, tutorials, etc.)
# ------------------------------------------------------------
x-dags-and-logs: &dags-and-logs
  - ./dags:/opt/airflow/dags
  - ./logs:/opt/airflow/logs
  - ./plugins:/opt/airflow/plugins
  - ./airflow_tutorial:/home/airflow/airflow_tutorial
  - ./data_quality:/home/airflow/data_quality
  - ./maintenance:/home/airflow/maintenance

# ------------------------------------------------------------
# SHARED ENVIRONMENT
# ------------------------------------------------------------
x-airflow-env: &airflow-common-env
  AIRFLOW__WEBSERVER__EXPOSE_CONFIG: true
  AIRFLOW__WEBSERVER__BASE_URL: http://localhost
  AIRFLOW__WEBSERVER__DAG_DEFAULT_VIEW: graph
  AIRFLOW__CORE__EXECUTOR: CeleryExecutor
  AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
  AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: true
  AIRFLOW__CORE__LOAD_EXAMPLES: false
  AIRFLOW__CORE__ENABLE_XCOM_PICKLING: true
  AIRFLOW__CORE__EXECUTION_API_SERVER_URL: http://api-server:8080/execution/
  AIRFLOW__CELERY__BROKER_URL: redis://@redis:6379/0
  AIRFLOW__CLI__ENDPOINT_URL: http://localhost
  AIRFLOW__METRICS__STATSD_ON: true
  AIRFLOW__METRICS__STATSD_HOST: prometheus-statsd-exporter
  AIRFLOW__METRICS__STATSD_PORT: 9125
  AIRFLOW__METRICS__STATSD_PREFIX: airflow
  AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: true
  DAG_FOLDERS: /home/airflow/airflow_tutorial,/home/airflow/data_quality,/home/airflow/maintenance

# ------------------------------------------------------------
# SHARED DEPENDS_ON (for all Airflow services)
# ------------------------------------------------------------
x-airflow-common-depends-on: &airflow-common-depends-on
  redis:
    condition: service_healthy
  database:
    condition: service_healthy

# ------------------------------------------------------------
# BASE AIRFLOW SERVICE DEFINITION
# ------------------------------------------------------------
x-airflow-common: &airflow-common
  image: airflow:3.0.2
  build:
    context: .
    dockerfile: Dockerfile
  environment: *airflow-common-env
  env_file:
    - .env
  volumes: *dags-and-logs
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on: *airflow-common-depends-on
  networks:
    - airflow


services:

  database:
    image: postgres:17.4
    container_name: airflow-db
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - ./postgres:/docker-entrypoint-initdb.d
    #   - ./database/pg-data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    networks:
      - airflow
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    # command: postgres -c log_min_error_statement=fatal -c wal_level=logical -c max_wal_senders=10 -c max_replication_slots=1

  pgadmin:
    image: dpage/pgadmin4:8.10
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=user@domain.com
      - PGADMIN_DEFAULT_PASSWORD=root
    ports:
      - 8081:80
    networks:
      - airflow

  redis:
    image: redis:7.2-bookworm
    container_name: airflow-redis
    expose:
      - 6379
    networks:
      - airflow
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s

  init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
          export AIRFLOW_UID=$(id -u)
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        echo
        echo "Creating missing opt dirs if missing:"
        echo
        mkdir -v -p /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Airflow version:"
        /entrypoint airflow version
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Running airflow config list to create default config file if missing."
        echo
        /entrypoint airflow config list >/dev/null
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Change ownership of files in /opt/airflow to ${AIRFLOW_UID}:0"
        echo
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/
        echo
        echo "Change ownership of files in shared volumes to ${AIRFLOW_UID}:0"
        echo
        chown -v -R "${AIRFLOW_UID}:0" /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: true
      _AIRFLOW_WWW_USER_CREATE: true
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    # volumes:
    #   - ${AIRFLOW_PROJ_DIR:-.}:/sources

  api-server:
    <<: *airflow-common
    container_name: airflow-api-server
    ports:
      - 80:8080
    command: api-server
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      <<: *airflow-common-depends-on
      init:
        condition: service_completed_successfully

  scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      <<: *airflow-common-depends-on
      init:
        condition: service_completed_successfully

  dag-processor:
    <<: *airflow-common
    command: dag-processor
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      <<: *airflow-common-depends-on
      init:
        condition: service_completed_successfully

  worker:
    <<: *airflow-common
    container_name: airflow-worker
    command: celery worker
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      api-server:
        condition: service_healthy
      init:
        condition: service_completed_successfully

  triggerer:
    <<: *airflow-common
    container_name: airflow-triggerer
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      <<: *airflow-common-depends-on
      init:
        condition: service_completed_successfully

  cli:
    <<: *airflow-common
    container_name: airflow-cli
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow
    depends_on:
      <<: *airflow-common-depends-on

  flower:
    <<: *airflow-common
    container_name: airflow-flower
    ports:
      - 5555:5555
    command: celery flower
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      <<: *airflow-common-depends-on
      init:
        condition: service_completed_successfully

  prometheus-statsd-exporter:
    image: prom/statsd-exporter:v0.27.1
    container_name: prom-statsd-exporter
    ports: 
      - 9102:9102
    networks: 
      - airflow
    command: ["--log.level=debug"]
